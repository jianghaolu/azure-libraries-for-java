/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.v2.management.resources.implementation;

import com.microsoft.azure.v2.AzureProxy;
import com.microsoft.azure.v2.CloudException;
import com.microsoft.azure.v2.Page;
import com.microsoft.azure.v2.PagedList;
import com.microsoft.rest.v2.BodyResponse;
import com.microsoft.rest.v2.ServiceCallback;
import com.microsoft.rest.v2.ServiceFuture;
import com.microsoft.rest.v2.Validator;
import com.microsoft.rest.v2.VoidResponse;
import com.microsoft.rest.v2.annotations.BodyParam;
import com.microsoft.rest.v2.annotations.DELETE;
import com.microsoft.rest.v2.annotations.ExpectedResponses;
import com.microsoft.rest.v2.annotations.GET;
import com.microsoft.rest.v2.annotations.HeaderParam;
import com.microsoft.rest.v2.annotations.Host;
import com.microsoft.rest.v2.annotations.PathParam;
import com.microsoft.rest.v2.annotations.PUT;
import com.microsoft.rest.v2.annotations.QueryParam;
import com.microsoft.rest.v2.annotations.UnexpectedResponseExceptionType;
import io.reactivex.Completable;
import io.reactivex.Maybe;
import io.reactivex.Observable;
import io.reactivex.Single;
import io.reactivex.annotations.NonNull;

/**
 * An instance of this class provides access to all the operations defined in
 * PolicyDefinitions.
 */
public final class PolicyDefinitionsInner {
    /**
     * The proxy service used to perform REST calls.
     */
    private PolicyDefinitionsService service;

    /**
     * The service client containing this operation class.
     */
    private PolicyClientImpl client;

    /**
     * Initializes an instance of PolicyDefinitionsInner.
     *
     * @param client the instance of the service client containing this operation class.
     */
    public PolicyDefinitionsInner(PolicyClientImpl client) {
        this.service = AzureProxy.create(PolicyDefinitionsService.class, client);
        this.client = client;
    }

    /**
     * The interface defining all the services for PolicyDefinitions to be used
     * by the proxy service to perform REST calls.
     */
    @Host("https://management.azure.com")
    private interface PolicyDefinitionsService {
        @PUT("subscriptions/{subscriptionId}/providers/Microsoft.Authorization/policyDefinitions/{policyDefinitionName}")
        @ExpectedResponses({201})
        @UnexpectedResponseExceptionType(CloudException.class)
        Single<BodyResponse<PolicyDefinitionInner>> createOrUpdate(@PathParam("policyDefinitionName") String policyDefinitionName, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json; charset=utf-8") PolicyDefinitionInner parameters, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage);

        @DELETE("subscriptions/{subscriptionId}/providers/Microsoft.Authorization/policyDefinitions/{policyDefinitionName}")
        @ExpectedResponses({200, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Single<VoidResponse> delete(@PathParam("policyDefinitionName") String policyDefinitionName, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage);

        @GET("subscriptions/{subscriptionId}/providers/Microsoft.Authorization/policyDefinitions/{policyDefinitionName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Single<BodyResponse<PolicyDefinitionInner>> get(@PathParam("policyDefinitionName") String policyDefinitionName, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage);

        @GET("providers/Microsoft.Authorization/policyDefinitions/{policyDefinitionName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Single<BodyResponse<PolicyDefinitionInner>> getBuiltIn(@PathParam("policyDefinitionName") String policyDefinitionName, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage);

        @PUT("providers/Microsoft.Management/managementgroups/{managementGroupId}/providers/Microsoft.Authorization/policyDefinitions/{policyDefinitionName}")
        @ExpectedResponses({201})
        @UnexpectedResponseExceptionType(CloudException.class)
        Single<BodyResponse<PolicyDefinitionInner>> createOrUpdateAtManagementGroup(@PathParam("policyDefinitionName") String policyDefinitionName, @PathParam("managementGroupId") String managementGroupId, @BodyParam("application/json; charset=utf-8") PolicyDefinitionInner parameters, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage);

        @DELETE("providers/Microsoft.Management/managementgroups/{managementGroupId}/providers/Microsoft.Authorization/policyDefinitions/{policyDefinitionName}")
        @ExpectedResponses({200, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Single<VoidResponse> deleteAtManagementGroup(@PathParam("policyDefinitionName") String policyDefinitionName, @PathParam("managementGroupId") String managementGroupId, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage);

        @GET("providers/Microsoft.Management/managementgroups/{managementGroupId}/providers/Microsoft.Authorization/policyDefinitions/{policyDefinitionName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Single<BodyResponse<PolicyDefinitionInner>> getAtManagementGroup(@PathParam("policyDefinitionName") String policyDefinitionName, @PathParam("managementGroupId") String managementGroupId, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage);

        @GET("subscriptions/{subscriptionId}/providers/Microsoft.Authorization/policyDefinitions")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Single<BodyResponse<PageImpl<PolicyDefinitionInner>>> list(@PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage);

        @GET("providers/Microsoft.Authorization/policyDefinitions")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Single<BodyResponse<PageImpl<PolicyDefinitionInner>>> listBuiltIn(@QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage);

        @GET("providers/Microsoft.Management/managementgroups/{managementGroupId}/providers/Microsoft.Authorization/policyDefinitions")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Single<BodyResponse<PageImpl<PolicyDefinitionInner>>> listByManagementGroup(@PathParam("managementGroupId") String managementGroupId, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage);

        @GET("{nextUrl}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Single<BodyResponse<PageImpl<PolicyDefinitionInner>>> listNext(@PathParam(value = "nextUrl", encoded = true) String nextUrl, @HeaderParam("accept-language") String acceptLanguage);

        @GET("{nextUrl}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Single<BodyResponse<PageImpl<PolicyDefinitionInner>>> listBuiltInNext(@PathParam(value = "nextUrl", encoded = true) String nextUrl, @HeaderParam("accept-language") String acceptLanguage);

        @GET("{nextUrl}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Single<BodyResponse<PageImpl<PolicyDefinitionInner>>> listByManagementGroupNext(@PathParam(value = "nextUrl", encoded = true) String nextUrl, @HeaderParam("accept-language") String acceptLanguage);
    }

    /**
     * Creates or updates a policy definition.
     *
     * @param policyDefinitionName The name of the policy definition to create.
     * @param parameters The policy definition properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PolicyDefinitionInner object if successful.
     */
    public PolicyDefinitionInner createOrUpdate(@NonNull String policyDefinitionName, @NonNull PolicyDefinitionInner parameters) {
        return createOrUpdateAsync(policyDefinitionName, parameters).blockingGet();
    }

    /**
     * Creates or updates a policy definition.
     *
     * @param policyDefinitionName The name of the policy definition to create.
     * @param parameters The policy definition properties.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<PolicyDefinitionInner> createOrUpdateAsync(@NonNull String policyDefinitionName, @NonNull PolicyDefinitionInner parameters, ServiceCallback<PolicyDefinitionInner> serviceCallback) {
        return ServiceFuture.fromBody(createOrUpdateAsync(policyDefinitionName, parameters), serviceCallback);
    }

    /**
     * Creates or updates a policy definition.
     *
     * @param policyDefinitionName The name of the policy definition to create.
     * @param parameters The policy definition properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<PolicyDefinitionInner>> createOrUpdateWithRestResponseAsync(@NonNull String policyDefinitionName, @NonNull PolicyDefinitionInner parameters) {
        if (policyDefinitionName == null) {
            throw new IllegalArgumentException("Parameter policyDefinitionName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        Validator.validate(parameters);
        final String apiVersion = "2016-12-01";
        return service.createOrUpdate(policyDefinitionName, this.client.subscriptionId(), parameters, apiVersion, this.client.acceptLanguage());
    }

    /**
     * Creates or updates a policy definition.
     *
     * @param policyDefinitionName The name of the policy definition to create.
     * @param parameters The policy definition properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<PolicyDefinitionInner> createOrUpdateAsync(@NonNull String policyDefinitionName, @NonNull PolicyDefinitionInner parameters) {
        return createOrUpdateWithRestResponseAsync(policyDefinitionName, parameters)
            .flatMapMaybe((BodyResponse<PolicyDefinitionInner> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Deletes a policy definition.
     *
     * @param policyDefinitionName The name of the policy definition to delete.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void delete(@NonNull String policyDefinitionName) {
        deleteAsync(policyDefinitionName).blockingAwait();
    }

    /**
     * Deletes a policy definition.
     *
     * @param policyDefinitionName The name of the policy definition to delete.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Void> deleteAsync(@NonNull String policyDefinitionName, ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(deleteAsync(policyDefinitionName), serviceCallback);
    }

    /**
     * Deletes a policy definition.
     *
     * @param policyDefinitionName The name of the policy definition to delete.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Single<VoidResponse> deleteWithRestResponseAsync(@NonNull String policyDefinitionName) {
        if (policyDefinitionName == null) {
            throw new IllegalArgumentException("Parameter policyDefinitionName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        final String apiVersion = "2016-12-01";
        return service.delete(policyDefinitionName, this.client.subscriptionId(), apiVersion, this.client.acceptLanguage());
    }

    /**
     * Deletes a policy definition.
     *
     * @param policyDefinitionName The name of the policy definition to delete.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Completable deleteAsync(@NonNull String policyDefinitionName) {
        return deleteWithRestResponseAsync(policyDefinitionName)
            .toCompletable();
    }

    /**
     * Gets the policy definition.
     *
     * @param policyDefinitionName The name of the policy definition to get.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PolicyDefinitionInner object if successful.
     */
    public PolicyDefinitionInner get(@NonNull String policyDefinitionName) {
        return getAsync(policyDefinitionName).blockingGet();
    }

    /**
     * Gets the policy definition.
     *
     * @param policyDefinitionName The name of the policy definition to get.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<PolicyDefinitionInner> getAsync(@NonNull String policyDefinitionName, ServiceCallback<PolicyDefinitionInner> serviceCallback) {
        return ServiceFuture.fromBody(getAsync(policyDefinitionName), serviceCallback);
    }

    /**
     * Gets the policy definition.
     *
     * @param policyDefinitionName The name of the policy definition to get.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<PolicyDefinitionInner>> getWithRestResponseAsync(@NonNull String policyDefinitionName) {
        if (policyDefinitionName == null) {
            throw new IllegalArgumentException("Parameter policyDefinitionName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        final String apiVersion = "2016-12-01";
        return service.get(policyDefinitionName, this.client.subscriptionId(), apiVersion, this.client.acceptLanguage());
    }

    /**
     * Gets the policy definition.
     *
     * @param policyDefinitionName The name of the policy definition to get.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<PolicyDefinitionInner> getAsync(@NonNull String policyDefinitionName) {
        return getWithRestResponseAsync(policyDefinitionName)
            .flatMapMaybe((BodyResponse<PolicyDefinitionInner> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Gets the built in policy definition.
     *
     * @param policyDefinitionName The name of the built in policy definition to get.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PolicyDefinitionInner object if successful.
     */
    public PolicyDefinitionInner getBuiltIn(@NonNull String policyDefinitionName) {
        return getBuiltInAsync(policyDefinitionName).blockingGet();
    }

    /**
     * Gets the built in policy definition.
     *
     * @param policyDefinitionName The name of the built in policy definition to get.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<PolicyDefinitionInner> getBuiltInAsync(@NonNull String policyDefinitionName, ServiceCallback<PolicyDefinitionInner> serviceCallback) {
        return ServiceFuture.fromBody(getBuiltInAsync(policyDefinitionName), serviceCallback);
    }

    /**
     * Gets the built in policy definition.
     *
     * @param policyDefinitionName The name of the built in policy definition to get.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<PolicyDefinitionInner>> getBuiltInWithRestResponseAsync(@NonNull String policyDefinitionName) {
        if (policyDefinitionName == null) {
            throw new IllegalArgumentException("Parameter policyDefinitionName is required and cannot be null.");
        }
        final String apiVersion = "2016-12-01";
        return service.getBuiltIn(policyDefinitionName, apiVersion, this.client.acceptLanguage());
    }

    /**
     * Gets the built in policy definition.
     *
     * @param policyDefinitionName The name of the built in policy definition to get.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<PolicyDefinitionInner> getBuiltInAsync(@NonNull String policyDefinitionName) {
        return getBuiltInWithRestResponseAsync(policyDefinitionName)
            .flatMapMaybe((BodyResponse<PolicyDefinitionInner> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Creates or updates a policy definition at management group level.
     *
     * @param policyDefinitionName The name of the policy definition to create.
     * @param managementGroupId The ID of the management group.
     * @param parameters The policy definition properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PolicyDefinitionInner object if successful.
     */
    public PolicyDefinitionInner createOrUpdateAtManagementGroup(@NonNull String policyDefinitionName, @NonNull String managementGroupId, @NonNull PolicyDefinitionInner parameters) {
        return createOrUpdateAtManagementGroupAsync(policyDefinitionName, managementGroupId, parameters).blockingGet();
    }

    /**
     * Creates or updates a policy definition at management group level.
     *
     * @param policyDefinitionName The name of the policy definition to create.
     * @param managementGroupId The ID of the management group.
     * @param parameters The policy definition properties.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<PolicyDefinitionInner> createOrUpdateAtManagementGroupAsync(@NonNull String policyDefinitionName, @NonNull String managementGroupId, @NonNull PolicyDefinitionInner parameters, ServiceCallback<PolicyDefinitionInner> serviceCallback) {
        return ServiceFuture.fromBody(createOrUpdateAtManagementGroupAsync(policyDefinitionName, managementGroupId, parameters), serviceCallback);
    }

    /**
     * Creates or updates a policy definition at management group level.
     *
     * @param policyDefinitionName The name of the policy definition to create.
     * @param managementGroupId The ID of the management group.
     * @param parameters The policy definition properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<PolicyDefinitionInner>> createOrUpdateAtManagementGroupWithRestResponseAsync(@NonNull String policyDefinitionName, @NonNull String managementGroupId, @NonNull PolicyDefinitionInner parameters) {
        if (policyDefinitionName == null) {
            throw new IllegalArgumentException("Parameter policyDefinitionName is required and cannot be null.");
        }
        if (managementGroupId == null) {
            throw new IllegalArgumentException("Parameter managementGroupId is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        Validator.validate(parameters);
        final String apiVersion = "2016-12-01";
        return service.createOrUpdateAtManagementGroup(policyDefinitionName, managementGroupId, parameters, apiVersion, this.client.acceptLanguage());
    }

    /**
     * Creates or updates a policy definition at management group level.
     *
     * @param policyDefinitionName The name of the policy definition to create.
     * @param managementGroupId The ID of the management group.
     * @param parameters The policy definition properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<PolicyDefinitionInner> createOrUpdateAtManagementGroupAsync(@NonNull String policyDefinitionName, @NonNull String managementGroupId, @NonNull PolicyDefinitionInner parameters) {
        return createOrUpdateAtManagementGroupWithRestResponseAsync(policyDefinitionName, managementGroupId, parameters)
            .flatMapMaybe((BodyResponse<PolicyDefinitionInner> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Deletes a policy definition at management group level.
     *
     * @param policyDefinitionName The name of the policy definition to delete.
     * @param managementGroupId The ID of the management group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void deleteAtManagementGroup(@NonNull String policyDefinitionName, @NonNull String managementGroupId) {
        deleteAtManagementGroupAsync(policyDefinitionName, managementGroupId).blockingAwait();
    }

    /**
     * Deletes a policy definition at management group level.
     *
     * @param policyDefinitionName The name of the policy definition to delete.
     * @param managementGroupId The ID of the management group.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Void> deleteAtManagementGroupAsync(@NonNull String policyDefinitionName, @NonNull String managementGroupId, ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(deleteAtManagementGroupAsync(policyDefinitionName, managementGroupId), serviceCallback);
    }

    /**
     * Deletes a policy definition at management group level.
     *
     * @param policyDefinitionName The name of the policy definition to delete.
     * @param managementGroupId The ID of the management group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Single<VoidResponse> deleteAtManagementGroupWithRestResponseAsync(@NonNull String policyDefinitionName, @NonNull String managementGroupId) {
        if (policyDefinitionName == null) {
            throw new IllegalArgumentException("Parameter policyDefinitionName is required and cannot be null.");
        }
        if (managementGroupId == null) {
            throw new IllegalArgumentException("Parameter managementGroupId is required and cannot be null.");
        }
        final String apiVersion = "2016-12-01";
        return service.deleteAtManagementGroup(policyDefinitionName, managementGroupId, apiVersion, this.client.acceptLanguage());
    }

    /**
     * Deletes a policy definition at management group level.
     *
     * @param policyDefinitionName The name of the policy definition to delete.
     * @param managementGroupId The ID of the management group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Completable deleteAtManagementGroupAsync(@NonNull String policyDefinitionName, @NonNull String managementGroupId) {
        return deleteAtManagementGroupWithRestResponseAsync(policyDefinitionName, managementGroupId)
            .toCompletable();
    }

    /**
     * Gets the policy definition at management group level.
     *
     * @param policyDefinitionName The name of the policy definition to get.
     * @param managementGroupId The ID of the management group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PolicyDefinitionInner object if successful.
     */
    public PolicyDefinitionInner getAtManagementGroup(@NonNull String policyDefinitionName, @NonNull String managementGroupId) {
        return getAtManagementGroupAsync(policyDefinitionName, managementGroupId).blockingGet();
    }

    /**
     * Gets the policy definition at management group level.
     *
     * @param policyDefinitionName The name of the policy definition to get.
     * @param managementGroupId The ID of the management group.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<PolicyDefinitionInner> getAtManagementGroupAsync(@NonNull String policyDefinitionName, @NonNull String managementGroupId, ServiceCallback<PolicyDefinitionInner> serviceCallback) {
        return ServiceFuture.fromBody(getAtManagementGroupAsync(policyDefinitionName, managementGroupId), serviceCallback);
    }

    /**
     * Gets the policy definition at management group level.
     *
     * @param policyDefinitionName The name of the policy definition to get.
     * @param managementGroupId The ID of the management group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<PolicyDefinitionInner>> getAtManagementGroupWithRestResponseAsync(@NonNull String policyDefinitionName, @NonNull String managementGroupId) {
        if (policyDefinitionName == null) {
            throw new IllegalArgumentException("Parameter policyDefinitionName is required and cannot be null.");
        }
        if (managementGroupId == null) {
            throw new IllegalArgumentException("Parameter managementGroupId is required and cannot be null.");
        }
        final String apiVersion = "2016-12-01";
        return service.getAtManagementGroup(policyDefinitionName, managementGroupId, apiVersion, this.client.acceptLanguage());
    }

    /**
     * Gets the policy definition at management group level.
     *
     * @param policyDefinitionName The name of the policy definition to get.
     * @param managementGroupId The ID of the management group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<PolicyDefinitionInner> getAtManagementGroupAsync(@NonNull String policyDefinitionName, @NonNull String managementGroupId) {
        return getAtManagementGroupWithRestResponseAsync(policyDefinitionName, managementGroupId)
            .flatMapMaybe((BodyResponse<PolicyDefinitionInner> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Gets all the policy definitions for a subscription.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;PolicyDefinitionInner&gt; object if successful.
     */
    public PagedList<PolicyDefinitionInner> list() {
        Page<PolicyDefinitionInner> response = listSinglePageAsync().blockingGet();
        return new PagedList<PolicyDefinitionInner>(response) {
            @Override
            public Page<PolicyDefinitionInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).blockingGet();
            }
        };
    }

    /**
     * Gets all the policy definitions for a subscription.
     *
     * @return the observable to the PagedList&lt;PolicyDefinitionInner&gt; object.
     */
    public Observable<Page<PolicyDefinitionInner>> listAsync() {
        return listSinglePageAsync()
            .toObservable()
            .concatMap((Page<PolicyDefinitionInner> page) -> {
                String nextPageLink = page.nextPageLink();
                if (nextPageLink == null) {
                    return Observable.just(page);
                }
                return Observable.just(page).concatWith(listNextAsync(nextPageLink));
            });
    }

    /**
     * Gets all the policy definitions for a subscription.
     *
     * @return the Single&lt;Page&lt;PolicyDefinitionInner&gt;&gt; object if successful.
     */
    public Single<Page<PolicyDefinitionInner>> listSinglePageAsync() {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        final String apiVersion = "2016-12-01";
        return service.list(this.client.subscriptionId(), apiVersion, this.client.acceptLanguage())
            .map((BodyResponse<PageImpl<PolicyDefinitionInner>> res) -> res.body());
    }

    /**
     * Gets all the built in policy definitions.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;PolicyDefinitionInner&gt; object if successful.
     */
    public PagedList<PolicyDefinitionInner> listBuiltIn() {
        Page<PolicyDefinitionInner> response = listBuiltInSinglePageAsync().blockingGet();
        return new PagedList<PolicyDefinitionInner>(response) {
            @Override
            public Page<PolicyDefinitionInner> nextPage(String nextPageLink) {
                return listBuiltInNextSinglePageAsync(nextPageLink).blockingGet();
            }
        };
    }

    /**
     * Gets all the built in policy definitions.
     *
     * @return the observable to the PagedList&lt;PolicyDefinitionInner&gt; object.
     */
    public Observable<Page<PolicyDefinitionInner>> listBuiltInAsync() {
        return listBuiltInSinglePageAsync()
            .toObservable()
            .concatMap((Page<PolicyDefinitionInner> page) -> {
                String nextPageLink = page.nextPageLink();
                if (nextPageLink == null) {
                    return Observable.just(page);
                }
                return Observable.just(page).concatWith(listBuiltInNextAsync(nextPageLink));
            });
    }

    /**
     * Gets all the built in policy definitions.
     *
     * @return the Single&lt;Page&lt;PolicyDefinitionInner&gt;&gt; object if successful.
     */
    public Single<Page<PolicyDefinitionInner>> listBuiltInSinglePageAsync() {
        final String apiVersion = "2016-12-01";
        return service.listBuiltIn(apiVersion, this.client.acceptLanguage())
            .map((BodyResponse<PageImpl<PolicyDefinitionInner>> res) -> res.body());
    }

    /**
     * Gets all the policy definitions for a subscription at management group level.
     *
     * @param managementGroupId The ID of the management group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;PolicyDefinitionInner&gt; object if successful.
     */
    public PagedList<PolicyDefinitionInner> listByManagementGroup(@NonNull String managementGroupId) {
        Page<PolicyDefinitionInner> response = listByManagementGroupSinglePageAsync(managementGroupId).blockingGet();
        return new PagedList<PolicyDefinitionInner>(response) {
            @Override
            public Page<PolicyDefinitionInner> nextPage(String nextPageLink) {
                return listByManagementGroupNextSinglePageAsync(nextPageLink).blockingGet();
            }
        };
    }

    /**
     * Gets all the policy definitions for a subscription at management group level.
     *
     * @param managementGroupId The ID of the management group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable to the PagedList&lt;PolicyDefinitionInner&gt; object.
     */
    public Observable<Page<PolicyDefinitionInner>> listByManagementGroupAsync(@NonNull String managementGroupId) {
        return listByManagementGroupSinglePageAsync(managementGroupId)
            .toObservable()
            .concatMap((Page<PolicyDefinitionInner> page) -> {
                String nextPageLink = page.nextPageLink();
                if (nextPageLink == null) {
                    return Observable.just(page);
                }
                return Observable.just(page).concatWith(listByManagementGroupNextAsync(nextPageLink));
            });
    }

    /**
     * Gets all the policy definitions for a subscription at management group level.
     *
     * @param managementGroupId The ID of the management group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the Single&lt;Page&lt;PolicyDefinitionInner&gt;&gt; object if successful.
     */
    public Single<Page<PolicyDefinitionInner>> listByManagementGroupSinglePageAsync(@NonNull String managementGroupId) {
        if (managementGroupId == null) {
            throw new IllegalArgumentException("Parameter managementGroupId is required and cannot be null.");
        }
        final String apiVersion = "2016-12-01";
        return service.listByManagementGroup(managementGroupId, apiVersion, this.client.acceptLanguage())
            .map((BodyResponse<PageImpl<PolicyDefinitionInner>> res) -> res.body());
    }

    /**
     * Gets all the policy definitions for a subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;PolicyDefinitionInner&gt; object if successful.
     */
    public PagedList<PolicyDefinitionInner> listNext(@NonNull String nextPageLink) {
        Page<PolicyDefinitionInner> response = listNextSinglePageAsync(nextPageLink).blockingGet();
        return new PagedList<PolicyDefinitionInner>(response) {
            @Override
            public Page<PolicyDefinitionInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).blockingGet();
            }
        };
    }

    /**
     * Gets all the policy definitions for a subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable to the PagedList&lt;PolicyDefinitionInner&gt; object.
     */
    public Observable<Page<PolicyDefinitionInner>> listNextAsync(@NonNull String nextPageLink) {
        return listNextSinglePageAsync(nextPageLink)
            .toObservable()
            .concatMap((Page<PolicyDefinitionInner> page) -> {
                String nextPageLink1 = page.nextPageLink();
                if (nextPageLink1 == null) {
                    return Observable.just(page);
                }
                return Observable.just(page).concatWith(listNextAsync(nextPageLink1));
            });
    }

    /**
     * Gets all the policy definitions for a subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the Single&lt;Page&lt;PolicyDefinitionInner&gt;&gt; object if successful.
     */
    public Single<Page<PolicyDefinitionInner>> listNextSinglePageAsync(@NonNull String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listNext(nextUrl, this.client.acceptLanguage())
            .map((BodyResponse<PageImpl<PolicyDefinitionInner>> res) -> res.body());
    }

    /**
     * Gets all the built in policy definitions.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;PolicyDefinitionInner&gt; object if successful.
     */
    public PagedList<PolicyDefinitionInner> listBuiltInNext(@NonNull String nextPageLink) {
        Page<PolicyDefinitionInner> response = listBuiltInNextSinglePageAsync(nextPageLink).blockingGet();
        return new PagedList<PolicyDefinitionInner>(response) {
            @Override
            public Page<PolicyDefinitionInner> nextPage(String nextPageLink) {
                return listBuiltInNextSinglePageAsync(nextPageLink).blockingGet();
            }
        };
    }

    /**
     * Gets all the built in policy definitions.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable to the PagedList&lt;PolicyDefinitionInner&gt; object.
     */
    public Observable<Page<PolicyDefinitionInner>> listBuiltInNextAsync(@NonNull String nextPageLink) {
        return listBuiltInNextSinglePageAsync(nextPageLink)
            .toObservable()
            .concatMap((Page<PolicyDefinitionInner> page) -> {
                String nextPageLink1 = page.nextPageLink();
                if (nextPageLink1 == null) {
                    return Observable.just(page);
                }
                return Observable.just(page).concatWith(listBuiltInNextAsync(nextPageLink1));
            });
    }

    /**
     * Gets all the built in policy definitions.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the Single&lt;Page&lt;PolicyDefinitionInner&gt;&gt; object if successful.
     */
    public Single<Page<PolicyDefinitionInner>> listBuiltInNextSinglePageAsync(@NonNull String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listBuiltInNext(nextUrl, this.client.acceptLanguage())
            .map((BodyResponse<PageImpl<PolicyDefinitionInner>> res) -> res.body());
    }

    /**
     * Gets all the policy definitions for a subscription at management group level.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;PolicyDefinitionInner&gt; object if successful.
     */
    public PagedList<PolicyDefinitionInner> listByManagementGroupNext(@NonNull String nextPageLink) {
        Page<PolicyDefinitionInner> response = listByManagementGroupNextSinglePageAsync(nextPageLink).blockingGet();
        return new PagedList<PolicyDefinitionInner>(response) {
            @Override
            public Page<PolicyDefinitionInner> nextPage(String nextPageLink) {
                return listByManagementGroupNextSinglePageAsync(nextPageLink).blockingGet();
            }
        };
    }

    /**
     * Gets all the policy definitions for a subscription at management group level.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable to the PagedList&lt;PolicyDefinitionInner&gt; object.
     */
    public Observable<Page<PolicyDefinitionInner>> listByManagementGroupNextAsync(@NonNull String nextPageLink) {
        return listByManagementGroupNextSinglePageAsync(nextPageLink)
            .toObservable()
            .concatMap((Page<PolicyDefinitionInner> page) -> {
                String nextPageLink1 = page.nextPageLink();
                if (nextPageLink1 == null) {
                    return Observable.just(page);
                }
                return Observable.just(page).concatWith(listByManagementGroupNextAsync(nextPageLink1));
            });
    }

    /**
     * Gets all the policy definitions for a subscription at management group level.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the Single&lt;Page&lt;PolicyDefinitionInner&gt;&gt; object if successful.
     */
    public Single<Page<PolicyDefinitionInner>> listByManagementGroupNextSinglePageAsync(@NonNull String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listByManagementGroupNext(nextUrl, this.client.acceptLanguage())
            .map((BodyResponse<PageImpl<PolicyDefinitionInner>> res) -> res.body());
    }
}
