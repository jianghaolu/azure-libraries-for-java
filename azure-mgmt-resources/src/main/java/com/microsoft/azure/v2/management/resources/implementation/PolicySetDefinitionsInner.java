/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.v2.management.resources.implementation;

import com.microsoft.azure.v2.AzureProxy;
import com.microsoft.azure.v2.Page;
import com.microsoft.azure.v2.PagedList;
import com.microsoft.azure.v2.management.resources.ErrorResponseException;
import com.microsoft.rest.v2.BodyResponse;
import com.microsoft.rest.v2.ServiceCallback;
import com.microsoft.rest.v2.ServiceFuture;
import com.microsoft.rest.v2.Validator;
import com.microsoft.rest.v2.VoidResponse;
import com.microsoft.rest.v2.annotations.BodyParam;
import com.microsoft.rest.v2.annotations.DELETE;
import com.microsoft.rest.v2.annotations.ExpectedResponses;
import com.microsoft.rest.v2.annotations.GET;
import com.microsoft.rest.v2.annotations.HeaderParam;
import com.microsoft.rest.v2.annotations.Host;
import com.microsoft.rest.v2.annotations.PathParam;
import com.microsoft.rest.v2.annotations.PUT;
import com.microsoft.rest.v2.annotations.QueryParam;
import com.microsoft.rest.v2.annotations.UnexpectedResponseExceptionType;
import io.reactivex.Completable;
import io.reactivex.Maybe;
import io.reactivex.Observable;
import io.reactivex.Single;
import io.reactivex.annotations.NonNull;

/**
 * An instance of this class provides access to all the operations defined in
 * PolicySetDefinitions.
 */
public final class PolicySetDefinitionsInner {
    /**
     * The proxy service used to perform REST calls.
     */
    private PolicySetDefinitionsService service;

    /**
     * The service client containing this operation class.
     */
    private PolicyClientImpl client;

    /**
     * Initializes an instance of PolicySetDefinitionsInner.
     *
     * @param client the instance of the service client containing this operation class.
     */
    public PolicySetDefinitionsInner(PolicyClientImpl client) {
        this.service = AzureProxy.create(PolicySetDefinitionsService.class, client);
        this.client = client;
    }

    /**
     * The interface defining all the services for PolicySetDefinitions to be
     * used by the proxy service to perform REST calls.
     */
    @Host("https://management.azure.com")
    private interface PolicySetDefinitionsService {
        @PUT("subscriptions/{subscriptionId}/providers/Microsoft.Authorization/policySetDefinitions/{policySetDefinitionName}")
        @ExpectedResponses({200, 201})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Single<BodyResponse<PolicySetDefinitionInner>> createOrUpdate(@PathParam("policySetDefinitionName") String policySetDefinitionName, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json; charset=utf-8") PolicySetDefinitionInner parameters, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage);

        @DELETE("subscriptions/{subscriptionId}/providers/Microsoft.Authorization/policySetDefinitions/{policySetDefinitionName}")
        @ExpectedResponses({200, 204})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Single<VoidResponse> delete(@PathParam("policySetDefinitionName") String policySetDefinitionName, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage);

        @GET("subscriptions/{subscriptionId}/providers/Microsoft.Authorization/policySetDefinitions/{policySetDefinitionName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Single<BodyResponse<PolicySetDefinitionInner>> get(@PathParam("policySetDefinitionName") String policySetDefinitionName, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage);

        @GET("providers/Microsoft.Authorization/policySetDefinitions/{policySetDefinitionName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Single<BodyResponse<PolicySetDefinitionInner>> getBuiltIn(@PathParam("policySetDefinitionName") String policySetDefinitionName, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage);

        @GET("subscriptions/{subscriptionId}/providers/Microsoft.Authorization/policySetDefinitions")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Single<BodyResponse<PageImpl<PolicySetDefinitionInner>>> list(@PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage);

        @GET("providers/Microsoft.Authorization/policySetDefinitions")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Single<BodyResponse<PageImpl<PolicySetDefinitionInner>>> listBuiltIn(@QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage);

        @PUT("providers/Microsoft.Management/managementgroups/{managementGroupId}/providers/Microsoft.Authorization/policySetDefinitions/{policySetDefinitionName}")
        @ExpectedResponses({200, 201})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Single<BodyResponse<PolicySetDefinitionInner>> createOrUpdateAtManagementGroup(@PathParam("policySetDefinitionName") String policySetDefinitionName, @PathParam("managementGroupId") String managementGroupId, @BodyParam("application/json; charset=utf-8") PolicySetDefinitionInner parameters, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage);

        @DELETE("providers/Microsoft.Management/managementgroups/{managementGroupId}/providers/Microsoft.Authorization/policySetDefinitions/{policySetDefinitionName}")
        @ExpectedResponses({200, 204})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Single<VoidResponse> deleteAtManagementGroup(@PathParam("policySetDefinitionName") String policySetDefinitionName, @PathParam("managementGroupId") String managementGroupId, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage);

        @GET("providers/Microsoft.Management/managementgroups/{managementGroupId}/providers/Microsoft.Authorization/policySetDefinitions/{policySetDefinitionName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Single<BodyResponse<PolicySetDefinitionInner>> getAtManagementGroup(@PathParam("policySetDefinitionName") String policySetDefinitionName, @PathParam("managementGroupId") String managementGroupId, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage);

        @GET("providers/Microsoft.Management/managementgroups/{managementGroupId}/providers/Microsoft.Authorization/policySetDefinitions")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Single<BodyResponse<PageImpl<PolicySetDefinitionInner>>> listByManagementGroup(@PathParam("managementGroupId") String managementGroupId, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage);

        @GET("{nextUrl}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Single<BodyResponse<PageImpl<PolicySetDefinitionInner>>> listNext(@PathParam(value = "nextUrl", encoded = true) String nextUrl, @HeaderParam("accept-language") String acceptLanguage);

        @GET("{nextUrl}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Single<BodyResponse<PageImpl<PolicySetDefinitionInner>>> listBuiltInNext(@PathParam(value = "nextUrl", encoded = true) String nextUrl, @HeaderParam("accept-language") String acceptLanguage);

        @GET("{nextUrl}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Single<BodyResponse<PageImpl<PolicySetDefinitionInner>>> listByManagementGroupNext(@PathParam(value = "nextUrl", encoded = true) String nextUrl, @HeaderParam("accept-language") String acceptLanguage);
    }

    /**
     * Creates or updates a policy set definition.
     *
     * @param policySetDefinitionName The name of the policy set definition to create.
     * @param parameters The policy set definition properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PolicySetDefinitionInner object if successful.
     */
    public PolicySetDefinitionInner createOrUpdate(@NonNull String policySetDefinitionName, @NonNull PolicySetDefinitionInner parameters) {
        return createOrUpdateAsync(policySetDefinitionName, parameters).blockingGet();
    }

    /**
     * Creates or updates a policy set definition.
     *
     * @param policySetDefinitionName The name of the policy set definition to create.
     * @param parameters The policy set definition properties.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<PolicySetDefinitionInner> createOrUpdateAsync(@NonNull String policySetDefinitionName, @NonNull PolicySetDefinitionInner parameters, ServiceCallback<PolicySetDefinitionInner> serviceCallback) {
        return ServiceFuture.fromBody(createOrUpdateAsync(policySetDefinitionName, parameters), serviceCallback);
    }

    /**
     * Creates or updates a policy set definition.
     *
     * @param policySetDefinitionName The name of the policy set definition to create.
     * @param parameters The policy set definition properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<PolicySetDefinitionInner>> createOrUpdateWithRestResponseAsync(@NonNull String policySetDefinitionName, @NonNull PolicySetDefinitionInner parameters) {
        if (policySetDefinitionName == null) {
            throw new IllegalArgumentException("Parameter policySetDefinitionName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        Validator.validate(parameters);
        final String apiVersion = "2017-06-01-preview";
        return service.createOrUpdate(policySetDefinitionName, this.client.subscriptionId(), parameters, apiVersion, this.client.acceptLanguage());
    }

    /**
     * Creates or updates a policy set definition.
     *
     * @param policySetDefinitionName The name of the policy set definition to create.
     * @param parameters The policy set definition properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<PolicySetDefinitionInner> createOrUpdateAsync(@NonNull String policySetDefinitionName, @NonNull PolicySetDefinitionInner parameters) {
        return createOrUpdateWithRestResponseAsync(policySetDefinitionName, parameters)
            .flatMapMaybe((BodyResponse<PolicySetDefinitionInner> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Deletes a policy set definition.
     *
     * @param policySetDefinitionName The name of the policy set definition to delete.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void delete(@NonNull String policySetDefinitionName) {
        deleteAsync(policySetDefinitionName).blockingAwait();
    }

    /**
     * Deletes a policy set definition.
     *
     * @param policySetDefinitionName The name of the policy set definition to delete.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Void> deleteAsync(@NonNull String policySetDefinitionName, ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(deleteAsync(policySetDefinitionName), serviceCallback);
    }

    /**
     * Deletes a policy set definition.
     *
     * @param policySetDefinitionName The name of the policy set definition to delete.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Single<VoidResponse> deleteWithRestResponseAsync(@NonNull String policySetDefinitionName) {
        if (policySetDefinitionName == null) {
            throw new IllegalArgumentException("Parameter policySetDefinitionName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        final String apiVersion = "2017-06-01-preview";
        return service.delete(policySetDefinitionName, this.client.subscriptionId(), apiVersion, this.client.acceptLanguage());
    }

    /**
     * Deletes a policy set definition.
     *
     * @param policySetDefinitionName The name of the policy set definition to delete.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Completable deleteAsync(@NonNull String policySetDefinitionName) {
        return deleteWithRestResponseAsync(policySetDefinitionName)
            .toCompletable();
    }

    /**
     * Gets the policy set definition.
     *
     * @param policySetDefinitionName The name of the policy set definition to get.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PolicySetDefinitionInner object if successful.
     */
    public PolicySetDefinitionInner get(@NonNull String policySetDefinitionName) {
        return getAsync(policySetDefinitionName).blockingGet();
    }

    /**
     * Gets the policy set definition.
     *
     * @param policySetDefinitionName The name of the policy set definition to get.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<PolicySetDefinitionInner> getAsync(@NonNull String policySetDefinitionName, ServiceCallback<PolicySetDefinitionInner> serviceCallback) {
        return ServiceFuture.fromBody(getAsync(policySetDefinitionName), serviceCallback);
    }

    /**
     * Gets the policy set definition.
     *
     * @param policySetDefinitionName The name of the policy set definition to get.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<PolicySetDefinitionInner>> getWithRestResponseAsync(@NonNull String policySetDefinitionName) {
        if (policySetDefinitionName == null) {
            throw new IllegalArgumentException("Parameter policySetDefinitionName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        final String apiVersion = "2017-06-01-preview";
        return service.get(policySetDefinitionName, this.client.subscriptionId(), apiVersion, this.client.acceptLanguage());
    }

    /**
     * Gets the policy set definition.
     *
     * @param policySetDefinitionName The name of the policy set definition to get.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<PolicySetDefinitionInner> getAsync(@NonNull String policySetDefinitionName) {
        return getWithRestResponseAsync(policySetDefinitionName)
            .flatMapMaybe((BodyResponse<PolicySetDefinitionInner> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Gets the built in policy set definition.
     *
     * @param policySetDefinitionName The name of the policy set definition to get.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PolicySetDefinitionInner object if successful.
     */
    public PolicySetDefinitionInner getBuiltIn(@NonNull String policySetDefinitionName) {
        return getBuiltInAsync(policySetDefinitionName).blockingGet();
    }

    /**
     * Gets the built in policy set definition.
     *
     * @param policySetDefinitionName The name of the policy set definition to get.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<PolicySetDefinitionInner> getBuiltInAsync(@NonNull String policySetDefinitionName, ServiceCallback<PolicySetDefinitionInner> serviceCallback) {
        return ServiceFuture.fromBody(getBuiltInAsync(policySetDefinitionName), serviceCallback);
    }

    /**
     * Gets the built in policy set definition.
     *
     * @param policySetDefinitionName The name of the policy set definition to get.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<PolicySetDefinitionInner>> getBuiltInWithRestResponseAsync(@NonNull String policySetDefinitionName) {
        if (policySetDefinitionName == null) {
            throw new IllegalArgumentException("Parameter policySetDefinitionName is required and cannot be null.");
        }
        final String apiVersion = "2017-06-01-preview";
        return service.getBuiltIn(policySetDefinitionName, apiVersion, this.client.acceptLanguage());
    }

    /**
     * Gets the built in policy set definition.
     *
     * @param policySetDefinitionName The name of the policy set definition to get.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<PolicySetDefinitionInner> getBuiltInAsync(@NonNull String policySetDefinitionName) {
        return getBuiltInWithRestResponseAsync(policySetDefinitionName)
            .flatMapMaybe((BodyResponse<PolicySetDefinitionInner> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Gets all the policy set definitions for a subscription.
     *
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;PolicySetDefinitionInner&gt; object if successful.
     */
    public PagedList<PolicySetDefinitionInner> list() {
        Page<PolicySetDefinitionInner> response = listSinglePageAsync().blockingGet();
        return new PagedList<PolicySetDefinitionInner>(response) {
            @Override
            public Page<PolicySetDefinitionInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).blockingGet();
            }
        };
    }

    /**
     * Gets all the policy set definitions for a subscription.
     *
     * @return the observable to the PagedList&lt;PolicySetDefinitionInner&gt; object.
     */
    public Observable<Page<PolicySetDefinitionInner>> listAsync() {
        return listSinglePageAsync()
            .toObservable()
            .concatMap((Page<PolicySetDefinitionInner> page) -> {
                String nextPageLink = page.nextPageLink();
                if (nextPageLink == null) {
                    return Observable.just(page);
                }
                return Observable.just(page).concatWith(listNextAsync(nextPageLink));
            });
    }

    /**
     * Gets all the policy set definitions for a subscription.
     *
     * @return the Single&lt;Page&lt;PolicySetDefinitionInner&gt;&gt; object if successful.
     */
    public Single<Page<PolicySetDefinitionInner>> listSinglePageAsync() {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        final String apiVersion = "2017-06-01-preview";
        return service.list(this.client.subscriptionId(), apiVersion, this.client.acceptLanguage())
            .map((BodyResponse<PageImpl<PolicySetDefinitionInner>> res) -> res.body());
    }

    /**
     * Gets all the built in policy set definitions.
     *
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;PolicySetDefinitionInner&gt; object if successful.
     */
    public PagedList<PolicySetDefinitionInner> listBuiltIn() {
        Page<PolicySetDefinitionInner> response = listBuiltInSinglePageAsync().blockingGet();
        return new PagedList<PolicySetDefinitionInner>(response) {
            @Override
            public Page<PolicySetDefinitionInner> nextPage(String nextPageLink) {
                return listBuiltInNextSinglePageAsync(nextPageLink).blockingGet();
            }
        };
    }

    /**
     * Gets all the built in policy set definitions.
     *
     * @return the observable to the PagedList&lt;PolicySetDefinitionInner&gt; object.
     */
    public Observable<Page<PolicySetDefinitionInner>> listBuiltInAsync() {
        return listBuiltInSinglePageAsync()
            .toObservable()
            .concatMap((Page<PolicySetDefinitionInner> page) -> {
                String nextPageLink = page.nextPageLink();
                if (nextPageLink == null) {
                    return Observable.just(page);
                }
                return Observable.just(page).concatWith(listBuiltInNextAsync(nextPageLink));
            });
    }

    /**
     * Gets all the built in policy set definitions.
     *
     * @return the Single&lt;Page&lt;PolicySetDefinitionInner&gt;&gt; object if successful.
     */
    public Single<Page<PolicySetDefinitionInner>> listBuiltInSinglePageAsync() {
        final String apiVersion = "2017-06-01-preview";
        return service.listBuiltIn(apiVersion, this.client.acceptLanguage())
            .map((BodyResponse<PageImpl<PolicySetDefinitionInner>> res) -> res.body());
    }

    /**
     * Creates or updates a policy set definition at management group level.
     *
     * @param policySetDefinitionName The name of the policy set definition to create.
     * @param managementGroupId The ID of the management group.
     * @param parameters The policy set definition properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PolicySetDefinitionInner object if successful.
     */
    public PolicySetDefinitionInner createOrUpdateAtManagementGroup(@NonNull String policySetDefinitionName, @NonNull String managementGroupId, @NonNull PolicySetDefinitionInner parameters) {
        return createOrUpdateAtManagementGroupAsync(policySetDefinitionName, managementGroupId, parameters).blockingGet();
    }

    /**
     * Creates or updates a policy set definition at management group level.
     *
     * @param policySetDefinitionName The name of the policy set definition to create.
     * @param managementGroupId The ID of the management group.
     * @param parameters The policy set definition properties.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<PolicySetDefinitionInner> createOrUpdateAtManagementGroupAsync(@NonNull String policySetDefinitionName, @NonNull String managementGroupId, @NonNull PolicySetDefinitionInner parameters, ServiceCallback<PolicySetDefinitionInner> serviceCallback) {
        return ServiceFuture.fromBody(createOrUpdateAtManagementGroupAsync(policySetDefinitionName, managementGroupId, parameters), serviceCallback);
    }

    /**
     * Creates or updates a policy set definition at management group level.
     *
     * @param policySetDefinitionName The name of the policy set definition to create.
     * @param managementGroupId The ID of the management group.
     * @param parameters The policy set definition properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<PolicySetDefinitionInner>> createOrUpdateAtManagementGroupWithRestResponseAsync(@NonNull String policySetDefinitionName, @NonNull String managementGroupId, @NonNull PolicySetDefinitionInner parameters) {
        if (policySetDefinitionName == null) {
            throw new IllegalArgumentException("Parameter policySetDefinitionName is required and cannot be null.");
        }
        if (managementGroupId == null) {
            throw new IllegalArgumentException("Parameter managementGroupId is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        Validator.validate(parameters);
        final String apiVersion = "2017-06-01-preview";
        return service.createOrUpdateAtManagementGroup(policySetDefinitionName, managementGroupId, parameters, apiVersion, this.client.acceptLanguage());
    }

    /**
     * Creates or updates a policy set definition at management group level.
     *
     * @param policySetDefinitionName The name of the policy set definition to create.
     * @param managementGroupId The ID of the management group.
     * @param parameters The policy set definition properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<PolicySetDefinitionInner> createOrUpdateAtManagementGroupAsync(@NonNull String policySetDefinitionName, @NonNull String managementGroupId, @NonNull PolicySetDefinitionInner parameters) {
        return createOrUpdateAtManagementGroupWithRestResponseAsync(policySetDefinitionName, managementGroupId, parameters)
            .flatMapMaybe((BodyResponse<PolicySetDefinitionInner> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Deletes a policy set definition at management group level.
     *
     * @param policySetDefinitionName The name of the policy set definition to delete.
     * @param managementGroupId The ID of the management group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void deleteAtManagementGroup(@NonNull String policySetDefinitionName, @NonNull String managementGroupId) {
        deleteAtManagementGroupAsync(policySetDefinitionName, managementGroupId).blockingAwait();
    }

    /**
     * Deletes a policy set definition at management group level.
     *
     * @param policySetDefinitionName The name of the policy set definition to delete.
     * @param managementGroupId The ID of the management group.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Void> deleteAtManagementGroupAsync(@NonNull String policySetDefinitionName, @NonNull String managementGroupId, ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(deleteAtManagementGroupAsync(policySetDefinitionName, managementGroupId), serviceCallback);
    }

    /**
     * Deletes a policy set definition at management group level.
     *
     * @param policySetDefinitionName The name of the policy set definition to delete.
     * @param managementGroupId The ID of the management group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Single<VoidResponse> deleteAtManagementGroupWithRestResponseAsync(@NonNull String policySetDefinitionName, @NonNull String managementGroupId) {
        if (policySetDefinitionName == null) {
            throw new IllegalArgumentException("Parameter policySetDefinitionName is required and cannot be null.");
        }
        if (managementGroupId == null) {
            throw new IllegalArgumentException("Parameter managementGroupId is required and cannot be null.");
        }
        final String apiVersion = "2017-06-01-preview";
        return service.deleteAtManagementGroup(policySetDefinitionName, managementGroupId, apiVersion, this.client.acceptLanguage());
    }

    /**
     * Deletes a policy set definition at management group level.
     *
     * @param policySetDefinitionName The name of the policy set definition to delete.
     * @param managementGroupId The ID of the management group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Completable deleteAtManagementGroupAsync(@NonNull String policySetDefinitionName, @NonNull String managementGroupId) {
        return deleteAtManagementGroupWithRestResponseAsync(policySetDefinitionName, managementGroupId)
            .toCompletable();
    }

    /**
     * Gets the policy set definition at management group level.
     *
     * @param policySetDefinitionName The name of the policy set definition to get.
     * @param managementGroupId The ID of the management group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PolicySetDefinitionInner object if successful.
     */
    public PolicySetDefinitionInner getAtManagementGroup(@NonNull String policySetDefinitionName, @NonNull String managementGroupId) {
        return getAtManagementGroupAsync(policySetDefinitionName, managementGroupId).blockingGet();
    }

    /**
     * Gets the policy set definition at management group level.
     *
     * @param policySetDefinitionName The name of the policy set definition to get.
     * @param managementGroupId The ID of the management group.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<PolicySetDefinitionInner> getAtManagementGroupAsync(@NonNull String policySetDefinitionName, @NonNull String managementGroupId, ServiceCallback<PolicySetDefinitionInner> serviceCallback) {
        return ServiceFuture.fromBody(getAtManagementGroupAsync(policySetDefinitionName, managementGroupId), serviceCallback);
    }

    /**
     * Gets the policy set definition at management group level.
     *
     * @param policySetDefinitionName The name of the policy set definition to get.
     * @param managementGroupId The ID of the management group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<PolicySetDefinitionInner>> getAtManagementGroupWithRestResponseAsync(@NonNull String policySetDefinitionName, @NonNull String managementGroupId) {
        if (policySetDefinitionName == null) {
            throw new IllegalArgumentException("Parameter policySetDefinitionName is required and cannot be null.");
        }
        if (managementGroupId == null) {
            throw new IllegalArgumentException("Parameter managementGroupId is required and cannot be null.");
        }
        final String apiVersion = "2017-06-01-preview";
        return service.getAtManagementGroup(policySetDefinitionName, managementGroupId, apiVersion, this.client.acceptLanguage());
    }

    /**
     * Gets the policy set definition at management group level.
     *
     * @param policySetDefinitionName The name of the policy set definition to get.
     * @param managementGroupId The ID of the management group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<PolicySetDefinitionInner> getAtManagementGroupAsync(@NonNull String policySetDefinitionName, @NonNull String managementGroupId) {
        return getAtManagementGroupWithRestResponseAsync(policySetDefinitionName, managementGroupId)
            .flatMapMaybe((BodyResponse<PolicySetDefinitionInner> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Gets all the policy set definitions for a subscription at management group.
     *
     * @param managementGroupId The ID of the management group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;PolicySetDefinitionInner&gt; object if successful.
     */
    public PagedList<PolicySetDefinitionInner> listByManagementGroup(@NonNull String managementGroupId) {
        Page<PolicySetDefinitionInner> response = listByManagementGroupSinglePageAsync(managementGroupId).blockingGet();
        return new PagedList<PolicySetDefinitionInner>(response) {
            @Override
            public Page<PolicySetDefinitionInner> nextPage(String nextPageLink) {
                return listByManagementGroupNextSinglePageAsync(nextPageLink).blockingGet();
            }
        };
    }

    /**
     * Gets all the policy set definitions for a subscription at management group.
     *
     * @param managementGroupId The ID of the management group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable to the PagedList&lt;PolicySetDefinitionInner&gt; object.
     */
    public Observable<Page<PolicySetDefinitionInner>> listByManagementGroupAsync(@NonNull String managementGroupId) {
        return listByManagementGroupSinglePageAsync(managementGroupId)
            .toObservable()
            .concatMap((Page<PolicySetDefinitionInner> page) -> {
                String nextPageLink = page.nextPageLink();
                if (nextPageLink == null) {
                    return Observable.just(page);
                }
                return Observable.just(page).concatWith(listByManagementGroupNextAsync(nextPageLink));
            });
    }

    /**
     * Gets all the policy set definitions for a subscription at management group.
     *
     * @param managementGroupId The ID of the management group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the Single&lt;Page&lt;PolicySetDefinitionInner&gt;&gt; object if successful.
     */
    public Single<Page<PolicySetDefinitionInner>> listByManagementGroupSinglePageAsync(@NonNull String managementGroupId) {
        if (managementGroupId == null) {
            throw new IllegalArgumentException("Parameter managementGroupId is required and cannot be null.");
        }
        final String apiVersion = "2017-06-01-preview";
        return service.listByManagementGroup(managementGroupId, apiVersion, this.client.acceptLanguage())
            .map((BodyResponse<PageImpl<PolicySetDefinitionInner>> res) -> res.body());
    }

    /**
     * Gets all the policy set definitions for a subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;PolicySetDefinitionInner&gt; object if successful.
     */
    public PagedList<PolicySetDefinitionInner> listNext(@NonNull String nextPageLink) {
        Page<PolicySetDefinitionInner> response = listNextSinglePageAsync(nextPageLink).blockingGet();
        return new PagedList<PolicySetDefinitionInner>(response) {
            @Override
            public Page<PolicySetDefinitionInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).blockingGet();
            }
        };
    }

    /**
     * Gets all the policy set definitions for a subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable to the PagedList&lt;PolicySetDefinitionInner&gt; object.
     */
    public Observable<Page<PolicySetDefinitionInner>> listNextAsync(@NonNull String nextPageLink) {
        return listNextSinglePageAsync(nextPageLink)
            .toObservable()
            .concatMap((Page<PolicySetDefinitionInner> page) -> {
                String nextPageLink1 = page.nextPageLink();
                if (nextPageLink1 == null) {
                    return Observable.just(page);
                }
                return Observable.just(page).concatWith(listNextAsync(nextPageLink1));
            });
    }

    /**
     * Gets all the policy set definitions for a subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the Single&lt;Page&lt;PolicySetDefinitionInner&gt;&gt; object if successful.
     */
    public Single<Page<PolicySetDefinitionInner>> listNextSinglePageAsync(@NonNull String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listNext(nextUrl, this.client.acceptLanguage())
            .map((BodyResponse<PageImpl<PolicySetDefinitionInner>> res) -> res.body());
    }

    /**
     * Gets all the built in policy set definitions.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;PolicySetDefinitionInner&gt; object if successful.
     */
    public PagedList<PolicySetDefinitionInner> listBuiltInNext(@NonNull String nextPageLink) {
        Page<PolicySetDefinitionInner> response = listBuiltInNextSinglePageAsync(nextPageLink).blockingGet();
        return new PagedList<PolicySetDefinitionInner>(response) {
            @Override
            public Page<PolicySetDefinitionInner> nextPage(String nextPageLink) {
                return listBuiltInNextSinglePageAsync(nextPageLink).blockingGet();
            }
        };
    }

    /**
     * Gets all the built in policy set definitions.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable to the PagedList&lt;PolicySetDefinitionInner&gt; object.
     */
    public Observable<Page<PolicySetDefinitionInner>> listBuiltInNextAsync(@NonNull String nextPageLink) {
        return listBuiltInNextSinglePageAsync(nextPageLink)
            .toObservable()
            .concatMap((Page<PolicySetDefinitionInner> page) -> {
                String nextPageLink1 = page.nextPageLink();
                if (nextPageLink1 == null) {
                    return Observable.just(page);
                }
                return Observable.just(page).concatWith(listBuiltInNextAsync(nextPageLink1));
            });
    }

    /**
     * Gets all the built in policy set definitions.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the Single&lt;Page&lt;PolicySetDefinitionInner&gt;&gt; object if successful.
     */
    public Single<Page<PolicySetDefinitionInner>> listBuiltInNextSinglePageAsync(@NonNull String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listBuiltInNext(nextUrl, this.client.acceptLanguage())
            .map((BodyResponse<PageImpl<PolicySetDefinitionInner>> res) -> res.body());
    }

    /**
     * Gets all the policy set definitions for a subscription at management group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;PolicySetDefinitionInner&gt; object if successful.
     */
    public PagedList<PolicySetDefinitionInner> listByManagementGroupNext(@NonNull String nextPageLink) {
        Page<PolicySetDefinitionInner> response = listByManagementGroupNextSinglePageAsync(nextPageLink).blockingGet();
        return new PagedList<PolicySetDefinitionInner>(response) {
            @Override
            public Page<PolicySetDefinitionInner> nextPage(String nextPageLink) {
                return listByManagementGroupNextSinglePageAsync(nextPageLink).blockingGet();
            }
        };
    }

    /**
     * Gets all the policy set definitions for a subscription at management group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable to the PagedList&lt;PolicySetDefinitionInner&gt; object.
     */
    public Observable<Page<PolicySetDefinitionInner>> listByManagementGroupNextAsync(@NonNull String nextPageLink) {
        return listByManagementGroupNextSinglePageAsync(nextPageLink)
            .toObservable()
            .concatMap((Page<PolicySetDefinitionInner> page) -> {
                String nextPageLink1 = page.nextPageLink();
                if (nextPageLink1 == null) {
                    return Observable.just(page);
                }
                return Observable.just(page).concatWith(listByManagementGroupNextAsync(nextPageLink1));
            });
    }

    /**
     * Gets all the policy set definitions for a subscription at management group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the Single&lt;Page&lt;PolicySetDefinitionInner&gt;&gt; object if successful.
     */
    public Single<Page<PolicySetDefinitionInner>> listByManagementGroupNextSinglePageAsync(@NonNull String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listByManagementGroupNext(nextUrl, this.client.acceptLanguage())
            .map((BodyResponse<PageImpl<PolicySetDefinitionInner>> res) -> res.body());
    }
}
